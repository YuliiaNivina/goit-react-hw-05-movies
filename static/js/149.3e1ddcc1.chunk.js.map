{"version":3,"file":"static/js/149.3e1ddcc1.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","services/moviesApi.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchForm = ({ setSearchParams }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleChange = evt => {\n    setSearchQuery(evt.target.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setSearchParams({ query: searchQuery });\n    setSearchQuery('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"searchForm\">\n      <input\n        className=\"search__input\"\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        value={searchQuery}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className=\"search__button\">\n        Search\n      </button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  setSearchParams: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useParams } from 'react-router-dom';\nimport * as getMovies from 'services/moviesApi';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!movieId) return;\n  }, [movieId]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovies\n      .fetchMoviesBySearch(query)\n      .then(setSearchMovies)\n      .catch(error => setError(error.message))\n      .finally(() => setIsLoading(false));\n  }, [query]);\n\n  return (\n    <>\n      <SearchForm setSearchParams={setSearchParams} />\n      {error && <p>Whoops, something went wrong: {error.message}</p>}\n      {isLoading && <p>Loading...</p>}\n      <MoviesList movies={searchMovies} />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'de2f3a0c57a311cc48a85909660d7281';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst fetchMovies = async (url = '') => {\n  try {\n    const response = await axios.get(url);\n    const data = response.data;\n\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport async function fethTrendingMovies() {\n  const data = await fetchMovies(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data.results;\n}\n\nexport function fetchMovieById(movieId) {\n  return fetchMovies(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n}\n\nexport async function fetchMovieCast(movieId) {\n  const data = await fetchMovies(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  return data.cast;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const data = await fetchMovies(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  return data.results;\n}\n\nexport async function fetchMoviesBySearch(searchQuery) {\n  const data = await fetchMovies(\n    `${BASE_URL}/search/movie?query=${searchQuery}&api_key=${API_KEY}`\n  );\n\n  return data.results;\n}\n"],"names":["movies","location","useLocation","map","movie","to","id","state","from","title","setSearchParams","useState","searchQuery","setSearchQuery","onSubmit","evt","preventDefault","query","className","type","autoComplete","autoFocus","placeholder","value","onChange","target","searchMovies","setSearchMovies","useSearchParams","searchParams","isLoading","setIsLoading","error","setError","movieId","useParams","get","useEffect","getMovies","then","catch","message","finally","MoviesList","API_KEY","BASE_URL","fetchMovies","url","axios","response","data","console","fethTrendingMovies","results","fetchMovieById","fetchMovieCast","cast","fetchMovieReviews","fetchMoviesBySearch"],"sourceRoot":""}